<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	xml 파일이 되기위한 조건
	1. [필수]		첫번째 줄에 반드시 헤더가 존재해야 한다.
		==> <?xml version="1.0" encoding="UTF-8"?>
	2. [선택]		DTD파일이나 스키마 파일 선언을 한다.
				DTD, 스키마란? 
					해당 xml 문서에서 사용할 수 있는 태그의 종류, 형식, 순서, ... 의 규칙을 지정한 파일
	3. [필수]		xml 파일은 단 하나의 루트 태그를 가져야 한다.
				루트 태그의 종류는 사용하는 스키마, DTD에서 정해놓은 것만 사용 가능
-->
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" 
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	namespace 란???
		이 파일과 같은 xml 파일이  여러개 존재하는 경우 이것을 구분해 줘야 한다.
		이처럼 SQL 파일을 구분할 목적으로 해당 파일에 별칭을 붙이는 방법이 namespace 속성이다.
		
		***
		각각의 SQL xml 파일 마다 namespace 값은 반드시 유일 해야 한다.(UNIQUE)
		
		지정하는 방법
			1. 일반 문자 지정방법
				==> mSQL
			2. 패키지 형태로 지정하는 방법
				==> com.hclass.member.????.???
-->
<mapper namespace="memberSQL">
	<!-- 
		이 파일은 데이터베이스에 보낼 질의 명령을 저장할 파일이다.
		따라서
		이 안에다 SQL 문을 하나씩 작성해 나가면 된다.
		
		문제는 지금 사용하는 문서는 xml 문서다. 따라서 반드시 하위 태그가 존재한다.
		
		질의 명령에 사용되는 태그는
			<select>, <insert>, <update>, <delete>, <sql>
		
	-->
	<!-- 
		각각의 질의명령 태그에는 필수 속성
			***
			id="???"
			==> 	이곳에 여러개의 질의 명령을 만들예정인데...
					각각의 질의 명령을 구분 할 수 있어야 한다.
					JSP 프로젝트에서 질의 명령을 구분할때  상수로 구분했던것과 동일한 이유이다.
					각각의 질의 명령을 구분할 목적으로 사용하는 속성이 [ id="???" ] 이다.
					
					따라서
						id 값은 같은 xml 문서내에서는 유일하게 만들어야 한다.(UNIQUE 해야 한다.)
						
			보조속성(선택 속성)
				1. resultType
				==> 질의 명령의 결과가 어떤 데이터 형태로 나올지 지정 하는것
					
					주의 사항
						질의 명령의 결과가 여러줄(다중 행으로..) 나오더라도 한 줄만 생각하고
						그것을 어떤 데이터 형태로 받을지 지정하는 것...
						
						예]
							SELECT
								B_ID
							FROM
								BOARD
							==> 이 경우 데이터가 저장 되어 있는 만큼 여러줄의 데이터가 조회가 될텐데
								한 줄의 결과는 아이디 하나이므로 
									resultType은 String이 된다.
					
				2. parameterType
				==>	질의 명령에 ? 가 존재할 경우 ? 를 채울 데이터 형태를 지정하는 것...
					
					문제는 
						? 가 여러개 존재하더라도 parameterType은 한번만(한개만) 지정할 수 있다.
						따라서 ?가 여러개 존재한다면 그 여러개 모두를 만족할 데이터 타입을 지정해야 한다.
						
					결론]
						? 가 두개 이상 존재할 경우에는 
						VO클래스(JavaBean 클래스) 를 이용해서 데이터를 채우도록 하면 편리할 것 같다.
						
					참고]
						resultType, parameterType을 지정하는 경우에는 
						풀 패키지 경로를 사용하는 것이 원칙이다.
						==> MemberVO 를 사용할  경우 ==> com.hclass.www.VO.MemberVO
						이렇게 사용하면 코드길이가 길어지고 불편할 것이다.
						
						해결 방법]
							1. myBatis에서 줄여준 것(주로 많이 사용하는 데이터 형태)
								그것을 이용하면 된다.
							2. 사용자가 직접 별칭을 부여해서 사용하는 방법
								myBatis 환경 설정 파일에서 <typeAlias> 를 지정해서 사용하면 된다.
						
	-->
<!-- 	<select id="Login" resultType="" parameterType="com.hclass.www.vo.MemberVO"> -->
	
	<!-- 자주 사용하는 내용은 한번만 만들어서 재 사용할 수 있다. -->
	<sql id="cntId">
		SELECT
			COUNT(*) AS CNT
		FROM
			member
		WHERE
			M_ID = #{id}
	</sql>
	
	<!-- 회원 아이디 조회 질의명령 -->
	<select id="countID" resultType="int" parameterType="string">
		<include refid="cntId" />
		<!-- SELECT
			COUNT(*) AS CNT
		FROM
			member
		WHERE
			M_ID = #{id} -->
	</select>
	
	
	<select id="Login" resultType="int" parameterType="mVO">
		<include refid="cntId" />
		<!-- SELECT
			COUNT(*) AS CNT
		FROM
			member
		WHERE
			M_ID = #{id} -->
			AND M_PW = #{pw}
	</select>
		<!--  
			myBatis에서는 변동 데이터를 JSP처럼 ? 로 처리하지 않는다.
				형식]
					#{적당한이름}
					
				이때 적당한 이름을 만드는 규칙
					1. VO를 이용하는 경우에는 getXXX()의 XXX 이름으로 지정하면 된다.(변수이름)
						(다만 첫글자는 소문자로 강제 지정한다.)
						
						우리의 경우   getId() 로 정의 되어 있고
						이 함수는 id 변수의 값을 꺼내오는 함수이다.
					
					장점]
						순서에 관계없이 알아서 get함수를 이용해서
						필요한 데이터를 셋팅할 수 있다.
		-->
<!-- 	
	<insert id="insertMbr" parameterType="mVO">
		INSERT INTO
			MEMBER
		VALUES(
			(SELECT NVL(MAX(M_NO) + 1, 10001) FROM MEMBER), #{name}, #{id}, #{pw}, #{mail}, 
			to_date(#{birth}, 'yyyy/mm/dd'), #{gen}, #{lang}, #{mgr}, #{msg}, sysdate
		)
	</insert>
	 -->
<!-- 
	mybatis에서는 연결된 질의 명령을 하나의 질의 실행으로 연속해서 실행 할  수 있다.
	
	예]
		일련번호를 발생한 후 그 번호를 다른곳에서 insert 해야 될 경우
		
		특정 테이블의 결과를 이용해서
		다른 테이블에서 그 내용을 사용해야 하는 경우
		
	사용방법]
		<실행태그 id="">
			<selectKey keyProperty="키값" 
						resultType="데이터형태" parameterType="데이터형태" 
						order="BEFORE || AFTER">
				선행질의 명령
			</selectKey>
			
			메인질의 명령
		</실행태그>
 -->
	<insert id="insertMbr" parameterType="mVO">
		<selectKey keyProperty="max" resultType="int" order="BEFORE">
			SELECT 
				NVL(MAX(M_NO) + 1, 10001) as MAX1
			FROM 
				MEMBER
		</selectKey>
		
		INSERT INTO
			MEMBER
		VALUES(
			#{max}, #{name}, #{id}, #{pw}, #{mail}, 
			to_date(#{birth}, 'yyyy/mm/dd'), #{gen}, #{lang}, #{mgr}, #{msg}, sysdate
		)
	</insert>
	
	<update id="updateMbr" parameterType="mVO">
		UPDATE
			member
		SET
			<if test="btn eq 'ipw'">
				m_pw = #{pw}
			</if>
			<if test="btn eq 'imail'">
				m_mail = #{mail}
			</if>
			<if test="btn eq 'ilang'">
				m_lang = #{lang}
			</if>
		WHERE
			m_id = #{id}
	</update>
	
	<!-- 회원정보 가져오기 질의명령 -->
	<select id="selectMbr" resultType="mVO" parameterType="string">
		SELECT
			m_no as mNo,
			m_id as id,
			m_name as name,
			m_pw as pw,
			m_mail as mail,
			to_char(m_birth, 'yyyy/mm/dd') as birth,
			m_gen as gen,
			m_lang as lang,
			m_mgr as mgr,
			m_msg as msg,
			to_char(m_indate, 'yyyy/MM/dd hh24:MI:ss') as sDate
		FROM 
			MEMBER
		WHERE
			M_ID = #{id}
	</select>
</mapper>